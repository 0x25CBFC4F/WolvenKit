name: wkit-draft-release
on:
  workflow_dispatch:
  push:
    tags-ignore:
    - '*-nightly*'

env:
  PROJ: ./WolvenKit/WolvenKit.csproj
  PROJC: ./WolvenKit.CLI/WolvenKit.CLI.csproj
  ARTIFACT_APP_WIN: WolvenKit Desktop
  ARTIFACT_CLI_WIN: WolvenKit CLI
  ARTIFACT_CLI_LIN: WolvenKit CLI Linux

jobs:
  desktop-win:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Publish with Dotnet
        run: dotnet publish ${{env.PROJ}} -o .\publish -c Release

      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_APP_WIN}}
          path: .\publish

  console-win:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Publish with Dotnet
        run: dotnet publish ${{env.PROJC}} -o .\publish_cli -r win-x64 -c Release --no-self-contained

      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_CLI_WIN}}
          path: ./publish_cli

  console-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      - name: Publish with Dotnet
        run: dotnet publish ${{env.PROJC}} -o ./publish_cli_linux -r linux-x64 -c Release --no-self-contained

      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_CLI_LIN}}
          path: ./publish_cli_linux

  release:
    runs-on: ubuntu-latest
    needs: [console-linux, console-win, desktop-win]
    env:
      VERSION: ${{github.ref_name}}
      OUT_DIR: ./publish
      NAME: WolvenKit
    steps:
      - name: Checkout
        uses: actions/checkout@v3
       
      ##########################################
      # SETUP

      # the CLI is versioned by its assemblyversion
      - name: Get console version
        uses: naminodarie/get-net-sdk-project-versions-action@v1
        id: get_version_cli
        with:
          proj-path: ${{env.PROJC}}

      # get the version for the portable from the tag
      # only run on dispatch, otherwise the version is taken from the tag
      - name: Get app version
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: naminodarie/get-net-sdk-project-versions-action@v1
        id: get_version
        with:
          proj-path: ${{env.PROJ}}
      - name: change version
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "VERSION=${{steps.get_version.outputs.assembly-version}}" >> $GITHUB_ENV

      ##########################################
      # Download artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v2

      ##########################################
      # create zip files
      - run: sudo apt-get install zip -y
      - run: mkdir -p ${{ env.OUT_DIR }}
      - run: cd "${{env.ARTIFACT_APP_WIN}}"; zip -r ../${{ env.OUT_DIR }}/${{env.NAME}}-${{env.VERSION}}.zip *
      - run: cd "${{env.ARTIFACT_CLI_WIN}}"; zip -r ../${{ env.OUT_DIR }}/${{env.NAME}}.Console-${{steps.get_version_cli.outputs.assembly-version}}.zip *
      - run: cd "${{env.ARTIFACT_CLI_LIN}}"; zip -r ../${{ env.OUT_DIR }}/${{env.NAME}}.ConsoleLinux-${{steps.get_version_cli.outputs.assembly-version}}.zip *

      ##########################################
      # RELEASE
      - name: Release tag
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true
          body_path: "RELEASE.md"
          files: "${{ env.OUT_DIR }}/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # dispatch release uses the version and not the ref
      - name: Release dispatch
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          draft: true
          generate_release_notes: true
          body_path: "RELEASE.md"
          files: "${{ env.OUT_DIR }}/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish-nugets:
    runs-on: windows-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, '-') }} # only run on tags that are non-prerelease tags

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x

      # Pack and upload nugets for Types, Modkit and CLI
      - run: dotnet pack .\WolvenKit.RED4.Types\WolvenKit.RED4.Types.csproj
      - run: dotnet nuget push .\WolvenKit.RED4.Types\nupkg\*.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json" --skip-duplicate

      - run: dotnet pack .\WolvenKit.Modkit\WolvenKit.Modkit.csproj
      - run: dotnet nuget push .\WolvenKit.Modkit\nupkg\*.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json" --skip-duplicate

      - run: dotnet pack .\WolvenKit.CLI\WolvenKit.CLI.csproj
      - run: dotnet nuget push .\WolvenKit.CLI\nupkg\*.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json" --skip-duplicate
