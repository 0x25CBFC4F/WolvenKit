name: WolvenKit-Nightly
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

env:
  FINALOUT: ./publish
  NAME: WolvenKit
  MREPO: ${{github.repository}}

jobs:
  check_date:
    runs-on: windows-2022
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Get commit
        run: |
          $commit = git log -1 --format=%H
          echo "SHA=$commit" >> $env:GITHUB_ENV
      - run: echo ${{ env.SHA }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ env.SHA }}) && echo "should_run=false" >> $GITHUB_OUTPUT

  nightly-wkit-win:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: windows-2022

    steps:

      ##########################################
      # SETUP
      - name: checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Get commit
        run: |
          $commit = git log -1 --format=%H
          echo "SHA=$commit" >> $env:GITHUB_ENV

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Get Date
        run: |
          $date = Get-Date -Format "yyyy-MM-dd"
          echo "ISODATE=$date" >> $env:GITHUB_ENV

      ##########################################
      # APP
      - name: Get version
        uses: naminodarie/get-net-sdk-project-versions-action@v1.1.2
        id: get_version
        with:
          proj-path: ./WolvenKit/WolvenKit.csproj

      - run: echo "VERSION=${{steps.get_version.outputs.assembly-version}}-nightly.${{env.ISODATE}}" >> $env:GITHUB_ENV
      - run: echo "PORTABLE=${{env.NAME}}-${{env.VERSION}}.zip" >> $env:GITHUB_ENV

      # Publish app
      - run: dotnet publish ./WolvenKit/WolvenKit.csproj -o ./publish/app/ -c Release --version-suffix "nightly.${{env.ISODATE}}" -p:InformationalVersion="${{env.VERSION}}"
      - run: Compress-Archive -Path ./publish/app/* -DestinationPath ${{env.FINALOUT}}/${{env.PORTABLE}}

      # tag main commit
      - name: Create Tag
        id: tag_version
        uses: rfuzzo/github-tag-action@7b0316b3fb8aa236fdc20bee0614ea6ef99f4bf1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: false
          custom_tag: ${{ env.VERSION }}
          tag_prefix: ""

      # get files
      #- name: app files
      #  run: echo "FILES=${{env.FINALOUT}}/${{env.PORTABLE}}"  >> $env:GITHUB_ENV

      ##########################################
      # CONSOLE

      # CLI commit checks
      - run: git fetch --tags
      - name: Get CLI commits
        run: |
          $commits = (git --no-pager diff --name-only ${{ steps.tag_version.outputs.previous_tag }}) | Out-String
          $i = 0
          $commits -Split "`r`n" | ForEach-Object {  if ( $_.StartsWith("WolvenKit.CLI/") -or $_.StartsWith("WolvenKit.Common/") -or $_.StartsWith("WolvenKit.Core/") -or $_.StartsWith("WolvenKit.Modkit/") -or $_.StartsWith("WolvenKit.RED4.") ) { $i = $i + 1  } }
          if ($i -eq 0) { $b = 'false' } else { $b = 'true' }
          echo "HAS_CLI_COMMITS=$b" >> $env:GITHUB_ENV

      - name: Get console version
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        uses: naminodarie/get-net-sdk-project-versions-action@v1.1.2
        id: get_version_cli
        with:
          proj-path: ./WolvenKit.CLI/WolvenKit.CLI.csproj

      - name: env cli version
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: echo "VERSIONC=${{steps.get_version_cli.outputs.assembly-version}}-nightly.${{env.ISODATE}}" >> $env:GITHUB_ENV
      - name: env cli name
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: echo "CONSOLE=${{env.NAME}}.Console-${{env.VERSIONC}}.zip" >> $env:GITHUB_ENV

      # Publish console
      - name: publish console
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: dotnet publish ./WolvenKit.CLI/WolvenKit.CLI.csproj -o ./publish/console/ -c Release --version-suffix "nightly.${{env.ISODATE}}"
      - name: zip console
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: Compress-Archive -Path ./publish/console/* -DestinationPath ${{env.FINALOUT}}/${{env.CONSOLE}}

      # get cli files
      #- name: cli files
      #  if: ${{ env.HAS_CLI_COMMITS == 'true' }}
      #  run: echo "FILES=${{env.FILES}} ${{env.FINALOUT}}/${{env.CONSOLE}}" >> $env:GITHUB_ENV

      # Pack and upload prerelease nugets
      - name: pack cli
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: dotnet pack ./WolvenKit.CLI/WolvenKit.CLI.csproj --version-suffix "nightly.${{env.ISODATE}}"
      - name: push nuget
        if: ${{ env.HAS_CLI_COMMITS == 'true' }}
        run: dotnet nuget push .\WolvenKit.CLI\nupkg\*.nupkg --api-key ${{secrets.NUGET_KEY}} --source "https://api.nuget.org/v3/index.json" --skip-duplicate
      
      ##########################################
      # RELEASE

      #- name: Release
      #  run: |
      #      gh release create ${{ env.VERSION }} -n "${{ env.MESSAGE }}" -t "${{ env.VERSION }}" -R ${{ env.REPO }} ${{ env.FILES }}
      #  env:
      #    MESSAGE: "This is a beta release so you may encounter bugs. Please report them.\n${{ steps.tag_version.outputs.changelog }}"
      #    REPO: WolvenKit/WolvenKit-nightly-releases
      #    GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Release dispatch
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
          body: "This is a beta release so you may encounter bugs. Please report them.\n${{ steps.tag_version.outputs.changelog }}"
          files: "${{ env.FINALOUT }}/*.zip"
          repository: ${{ env.REPO }}
          token: ${{ secrets.RELEASE_TOKEN }}
        #env:
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}